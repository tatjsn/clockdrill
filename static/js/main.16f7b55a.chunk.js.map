{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["clockToRadian","num","Math","PI","Clock","_ref","hours","mins","className","react_default","a","createElement","cx","css","_templateObject","Array","from","length","_","i","map","key","_templateObject2","_templateObject3","cos","sin","_templateObject4","_templateObject5","_templateObject6","_templateObject7","soundCorrect","Howl","src","soundIncorrect","soundMilestone","relatives","fullWidthControl","App_templateObject","fullScreenOverlay","App_templateObject2","getRandomInt","max","floor","random","App","_useState","useState","_useState2","Object","slicedToArray","score","setScore","_useState3","_useState4","questionHour","setQuestionHour","_useState5","_useState6","questionMinute","setQuestionMinute","_useState7","_useState8","answerHour","setAnswerHour","_useState9","_useState10","answerMinute","setAnswerMinute","_useState11","_useState12","answerRelative","setAnswerRelative","_useState13","_useState14","showCorrect","setShowCorrect","_useState15","_useState16","showIncorrect","setShowIncorrect","_useState17","_useState18","showMilestone","setShowMilestone","App_templateObject3","src_Clock","App_templateObject4","App_templateObject5","App_templateObject6","value","onChange","event","findIndex","item","target","type","onClick","setTimeout","play","newScore","defineProperty","App_templateObject7","_templateObject8","_templateObject9","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16f7b55a.chunk.js","sourcesContent":["import React from 'react';\nimport { css, cx } from 'emotion';\n\nfunction clockToRadian(num) {\n  return (num * 2 - 6) * Math.PI / 12;\n}\n\nfunction Clock({ hours, mins, className }) {\n  return (\n    <div className={cx(css`\nposition: relative;\nwidth: 300px;\nheight: 300px;\nborder: solid black 4px;\nborder-radius: 50%;\n`, className)}>\n      {Array.from({ length: 12 }, (_, i) => i + 1).map(num => (\n        <div key={num} className={cx(css`\nposition: absolute;\nwidth: 3rem\nheight: 3rem;\ntop: 50%;\nleft: 50%;\nfont-size: 24px;\nfont-weight: bold;\n`, css`\ntransform: translate(\ncalc(${Math.cos(clockToRadian(num)) * 135}px - 50%),\ncalc(${Math.sin(clockToRadian(num)) * 135}px - 50%)\n)\n`)}>{num}</div>\n      ))}\n      <div className={cx(css`\nposition: absolute;\nwidth: 80px;\nheight: 12px;\nbackground-color: blue;\ntop: 50%;\nleft: 50%;\ntransform-origin: center left;\n`, css`\ntransform: translate(0, -50%) rotate(${clockToRadian(hours + mins / 60)}rad)\n`)}/>\n      <div className={cx(css`\nposition: absolute;\nwidth: 120px;\nheight: 10px;\nbackground-color: red;\ntop: 50%;\nleft: 50%;\ntransform-origin: center left;\n`, css`\ntransform: translate(0, -50%) rotate(${clockToRadian(mins / 5)}rad)\n`)}/>\n    </div>\n  );\n}\n\nexport default Clock;\n","import React, { useState } from 'react';\nimport { css, cx } from 'emotion';\nimport { Howl } from 'howler';\n\nimport Clock from './Clock';\n\nconst soundCorrect = new Howl({\n  src: ['correct2.mp3']\n});\n\nconst soundIncorrect = new Howl({\n  src: ['incorrect2.mp3']\n});\n\nconst soundMilestone = new Howl({\n  src: ['shine1.mp3']\n});\n\nconst hours = [\n  'One',\n  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight',\n  'Nine',\n  'Ten',\n  'Eleven',\n  'Twelve',\n];\n\nconst mins = [\n  'Five',\n  'Ten',\n  'Quater',\n  'Twenty',\n  'Twenty five',\n  'Half',\n];\n\nconst relatives = [\n  'Past',\n  'To',\n];\n\nconst fullWidthControl = css`\ndisplay: block;\nwidth: 100%;\nheight: 40px;\nbackground-color: rgba(0, 0, 0, 0.1);\nfont-size: 20px;\n`;\n\nconst fullScreenOverlay = css`\nposition: absolute;\ntop: 0;\nleft: 0;\nright: 0;\nbottom: 0;\nbackground-color: rgba(0, 0, 0, 0.5);\ncolor: white;\nfont-size: 60px;\ndisplay: none; /* flex */\njustify-content: center;\nalign-items: center;\n\ndiv {\n  flex: 0 0 auto;\n}\n`;\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [questionHour, setQuestionHour] = useState(getRandomInt(12));\n  const [questionMinute, setQuestionMinute] = useState(getRandomInt(11));\n  const [answerHour, setAnswerHour] = useState(0);\n  const [answerMinute, setAnswerMinute] = useState(0);\n  const [answerRelative, setAnswerRelative] = useState(0);\n  const [showCorrect, setShowCorrect] = useState(false);\n  const [showIncorrect, setShowIncorrect] = useState(false);\n  const [showMilestone, setShowMilestone] = useState(false);\n\n  function handleSelectMinute(event) {\n    setAnswerMinute(mins.findIndex(item => item === event.target.value));\n  }\n\n  function handleSelectHour(event) {\n    setAnswerHour(hours.findIndex(item => item === event.target.value));\n  }\n\n  function handleSelectRelative(event) {\n    setAnswerRelative(relatives.findIndex(item => item === event.target.value));\n  }\n\n  function handleAnswer() {\n    let correct;\n\n    if (answerRelative === 0) {\n      // Past\n      correct = (answerHour === questionHour) && (answerMinute === questionMinute);\n    } else {\n      // To\n      correct = ((answerHour === questionHour + 1) || (answerHour + 12 === questionHour + 1))\n        && (10 - answerMinute === questionMinute);\n    }\n\n    if (correct) {\n      const newScore = score + 1;\n      setScore(newScore);\n      setQuestionHour(getRandomInt(12));\n      setQuestionMinute(getRandomInt(11));\n      if (newScore % 10 === 0) {\n        setShowMilestone(true);\n        setTimeout(() => soundMilestone.play(), 10);\n        setTimeout(() => setShowMilestone(false), 1000);\n      } else {\n        setShowCorrect(true);\n        setTimeout(() => soundCorrect.play(), 10);\n        setTimeout(() => setShowCorrect(false), 1000);\n      }\n    } else {\n      setShowIncorrect(true);\n      setTimeout(() => soundIncorrect.play(), 10);\n      setTimeout(() => setShowIncorrect(false), 1000);\n    }\n  }\n\n  return (\n    <div className={css`\nposition: relative;\nheight: 100vh;\npadding-top: 40px;\n`}>\n      <Clock className={css`\nmargin: 0 auto;\n`} hours={questionHour + 1} mins={(questionMinute + 1) * 5} />\n      <div className={css`\nposition: absolute;\ntop: 0;\nleft: 0;\nwidth: 100%;\nline-height: 40px;\n`}>Score: {score}</div>\n      <div className={css`\nposition: absolute;\nbottom: 0;\nleft: 0;\nwidth: 100%;\n`}>\n        <select className={fullWidthControl} value={mins[answerMinute]} onChange={handleSelectMinute}>\n          {mins.map(item => (\n            <option key={item} value={item}>{item}</option>\n          ))}\n        </select>\n        <select className={fullWidthControl} value={relatives[answerRelative]} onChange={handleSelectRelative}>\n          {relatives.map(item => (\n            <option key={item} value={item}>{item}</option>\n          ))}\n        </select>\n        <select className={fullWidthControl} value={hours[answerHour]} onChange={handleSelectHour}>\n          {hours.map(item => (\n            <option key={item} value={item}>{item}</option>\n          ))}\n        </select>\n        <button className={fullWidthControl} type=\"button\" onClick={handleAnswer}><span>&#128077;</span></button>\n      </div>\n      <div className={cx(fullScreenOverlay, { [css`display:flex;`]: showCorrect})}><div>Good!<span>&#128077;</span></div></div>\n      <div className={cx(fullScreenOverlay, { [css`display:flex;`]: showIncorrect})}><div>Try again<span>&#128546;</span></div></div>\n      <div className={cx(fullScreenOverlay, { [css`display:flex;`]: showMilestone})}><div><span>&#128124;</span>Excellent<span>&#128124;</span></div></div>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}